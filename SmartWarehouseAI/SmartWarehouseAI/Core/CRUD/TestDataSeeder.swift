//
//  TestDataSeeder.swift
//  SmartWarehouseAI
//
//  Created on 05.10.2025
//

import Foundation

/// Helper class for seeding test data during development
class TestDataSeeder {
    private let itemService = ItemService()
    private let stockService = StockService()
    private let kitService = KitService()

    /// Seeds sample data for testing
    func seedSampleData() async throws {
        print("üå± Seeding sample data...")

        // Create sample items
        let items = [
            Item(
                name: "–ë–æ–ª—Ç –ú6x20",
                sku: "BOLT-M6-20",
                itemDescription: "–ë–æ–ª—Ç –º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π –ú6, –¥–ª–∏–Ω–∞ 20–º–º",
                category: "–ö—Ä–µ–ø—ë–∂"
            ),
            Item(
                name: "–ì–∞–π–∫–∞ –ú6",
                sku: "NUT-M6",
                itemDescription: "–ì–∞–π–∫–∞ –º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è –ú6",
                category: "–ö—Ä–µ–ø—ë–∂"
            ),
            Item(
                name: "–®–∞–π–±–∞ –ú6",
                sku: "WASHER-M6",
                itemDescription: "–®–∞–π–±–∞ –ø–ª–æ—Å–∫–∞—è –ú6",
                category: "–ö—Ä–µ–ø—ë–∂"
            ),
            Item(
                name: "–ü–æ–¥—à–∏–ø–Ω–∏–∫ 6204",
                sku: "BEARING-6204",
                itemDescription: "–ü–æ–¥—à–∏–ø–Ω–∏–∫ —Ä–∞–¥–∏–∞–ª—å–Ω—ã–π 6204",
                category: "–ü–æ–¥—à–∏–ø–Ω–∏–∫–∏"
            ),
            Item(
                name: "–í–∏–Ω—Ç –ú4x10",
                sku: "SCREW-M4-10",
                itemDescription: "–í–∏–Ω—Ç —Å –ø–æ—Ç–∞–π–Ω–æ–π –≥–æ–ª–æ–≤–∫–æ–π –ú4x10",
                category: "–ö—Ä–µ–ø—ë–∂"
            )
        ]

        var createdItems: [Item] = []
        for item in items {
            let created = try await itemService.create(item)
            createdItems.append(created)
            print("  ‚úÖ Created item: \(created.name) (SKU: \(created.sku))")
        }

        // Add stock for items
        for item in createdItems {
            guard let itemId = item.id else { continue }

            let quantity = Int.random(in: 50...200)
            let minQty = Int.random(in: 10...30)

            let stock = Stock(
                itemId: itemId,
                quantity: quantity,
                location: "A-\(Int.random(in: 1...10))-\(Int.random(in: 1...5))",
                minQuantity: minQty,
                maxQuantity: minQty * 10
            )

            _ = try await stockService.create(stock)
            print("  üì¶ Added stock: \(quantity) units at \(stock.location ?? "unknown")")
        }

        // Create a sample kit
        if createdItems.count >= 3 {
            let kit = Kit(
                name: "–ö–æ–º–ø–ª–µ–∫—Ç –∫—Ä–µ–ø–µ–∂–∞ –ú6",
                kitDescription: "–ë–∞–∑–æ–≤—ã–π –∫–æ–º–ø–ª–µ–∫—Ç –º–µ—Ç–∏–∑–æ–≤ –ú6",
                sku: "KIT-M6-BASIC"
            )

            let createdKit = try await kitService.create(kit)
            print("  üéÅ Created kit: \(createdKit.name)")

            // Add parts to kit
            if let kitId = createdKit.id {
                // Add bolt
                if let boltId = createdItems[0].id {
                    _ = try await kitService.addPart(kitId: kitId, itemId: boltId, quantity: 10)
                    print("    ‚ûï Added 10x –ë–æ–ª—Ç –ú6x20")
                }

                // Add nut
                if let nutId = createdItems[1].id {
                    _ = try await kitService.addPart(kitId: kitId, itemId: nutId, quantity: 10)
                    print("    ‚ûï Added 10x –ì–∞–π–∫–∞ –ú6")
                }

                // Add washer
                if let washerId = createdItems[2].id {
                    _ = try await kitService.addPart(kitId: kitId, itemId: washerId, quantity: 20)
                    print("    ‚ûï Added 20x –®–∞–π–±–∞ –ú6")
                }
            }
        }

        print("‚ú® Sample data seeding complete!")
    }

    /// Clears all data from database
    func clearAllData() async throws {
        print("üóëÔ∏è  Clearing all data...")

        try await itemService.deleteAll()
        print("  ‚úÖ Deleted all items (cascade deletes stocks, kits, parts)")

        print("‚ú® All data cleared!")
    }

    /// Prints database statistics
    func printStatistics() async throws {
        let itemCount = try await itemService.count()
        let stockCount = try await stockService.count()
        let kitCount = try await kitService.count()
        let totalStock = try await stockService.totalQuantity()

        print("üìä Database Statistics:")
        print("  Items: \(itemCount)")
        print("  Stock records: \(stockCount)")
        print("  Total units in stock: \(totalStock)")
        print("  Kits: \(kitCount)")
    }
}
